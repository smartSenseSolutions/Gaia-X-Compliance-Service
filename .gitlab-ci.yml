stages:
  - test
  - sonar
  - build
  - build-sgx
  - sign
  - release
  - deploy

variables:
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_SGX_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-sgx

lint:code:
  image: node:20
  stage: test
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /^chore\(release\):/
      when: never
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /^chore\(release\):/
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH
  script:
    - npm ci
    - npm run lint

test:
  image: node:20
  stage: test
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /^chore\(release\):/
      when: never
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /^chore\(release\):/
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH
  script:
    - npm install
    - npm run test:unit
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    when: on_success
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/unit/cobertura-coverage.xml
    paths:
      - coverage/unit/lcov.info

integration-test:
  image: node:20
  stage: test
  services:
    - name: docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /^chore\(release\):/
      when: never
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /^chore\(release\):/
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH
  before_script:
    - curl -fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-20.10.9.tgz && tar xvzf docker-20.10.9.tgz --strip 1 -C /usr/local/bin docker/docker
  script:
    - npm install
    - npm run test:integration
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    when: on_success
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/integration/cobertura-coverage.xml
    paths:
      - coverage/integration/lcov.info

sonarqube-check:
  stage: sonar
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [ "" ]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  only:
    - development

build:
  image: docker
  id_tokens:
    SIGSTORE_ID_TOKEN:
      aud: sigstore
  variables:
    COSIGN_YES: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /^chore\(release\):/
      when: never
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /^chore\(release\):/
      when: never
    - if: $CI_COMMIT_BRANCH
  services:
    - docker:dind
  stage: build
  before_script:
    - apk update && apk add curl
    - curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
    - mv cosign-linux-amd64 /usr/local/bin/cosign
    - chmod +x /usr/local/bin/cosign
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --pull -t $CONTAINER_TEST_IMAGE --target production-build-stage .
    - docker push $CONTAINER_TEST_IMAGE
    - IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $CONTAINER_TEST_IMAGE)
    - cosign sign $IMAGE_DIGEST

deploy-on-lab:
  image: ubuntu
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /^chore\(release\):/
      when: never
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /^chore\(release\):/
      when: never
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "development"
  before_script:
    - apt update && apt install -y curl
    - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
  script:
    - helm upgrade --install -n "$CI_COMMIT_REF_SLUG" --create-namespace gx-compliance ./k8s/gx-compliance --set "nameOverride=$CI_COMMIT_REF_SLUG,ingress.hosts[0].host=compliance.lab.gaia-x.eu,ingress.hosts[0].paths[0].path=/$CI_COMMIT_REF_SLUG,image.tag=$CI_COMMIT_REF_SLUG,ingress.hosts[0].paths[0].pathType=Prefix,privateKey=$complianceKeyCA,X509_CERTIFICATE=$complianceCertCA,production=false" --kubeconfig "$GXDCH_KUBECONFIG"

make-semantic-release:
  image: node:18
  stage: release
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /^chore\(release\):/
      when: never
    - if: $CI_COMMIT_BRANCH == "main"
  before_script:
    - apt-get update -y && apt-get install -yqqf openssh-client git unzip sshpass rsync --fix-missing
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
    - eval $(ssh-agent -s)
    - echo "$CI_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null

    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    - git config --global user.email "cto@gaia-x.eu"
    - git config --global user.name "semantic-release-bot"
  script:
    - npm i
    - ./node_modules/.bin/semantic-release

# Tags build & deployment
build-release-tag-image:
  image: docker
  services:
    - docker:dind
  id_tokens:
    SIGSTORE_ID_TOKEN:
      aud: sigstore
  variables:
    COSIGN_YES: "true"
  stage: build
  before_script:
    - apk update && apk add curl
    - curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
    - mv cosign-linux-amd64 /usr/local/bin/cosign
    - chmod +x /usr/local/bin/cosign
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --pull -t $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG} --target production-build-stage . #vX.Y.Z tag
    - docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG}
    - docker tag $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG} $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG%.*} #vX.Y tag
    - docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG%.*}
    - docker tag $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG} $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG%%.*} #vX tag
    - docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG%%.*}
    - IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG})
    - cosign sign $IMAGE_DIGEST
  only:
    - tags

deploy-tag-on-lab:
  image: ubuntu
  stage: deploy
  when: manual
  before_script:
    - apt update && apt install -y curl
    - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
  script:
    - helm upgrade --install -n "${CI_COMMIT_TAG%%.*}" --create-namespace gx-compliance ./k8s/gx-compliance --set "nameOverride=${CI_COMMIT_TAG%%.*},ingress.hosts[0].host=compliance.lab.gaia-x.eu,ingress.hosts[0].paths[0].path=/${CI_COMMIT_TAG%%.*},image.tag=${CI_COMMIT_TAG%%.*},ingress.hosts[0].paths[0].pathType=Prefix,privateKey=$complianceKey,X509_CERTIFICATE=$complianceCert" --kubeconfig "$GXDCH_KUBECONFIG"
  only:
    - tags



##### SGX IMAGE GENERATION #####
build-sgx:
  image: ubuntu:jammy
  tags:
    - sgx
  id_tokens:
    SIGSTORE_ID_TOKEN:
      aud: sigstore
  variables:
    COSIGN_YES: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /^chore\(release\):/
      when: never
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /^chore\(release\):/
      when: never
    - if: $CI_COMMIT_BRANCH
  services:
    - docker:dind
  stage: build
  before_script:
    - apt update && DEBIAN_FRONTEND=noninteractive TZ=Europe/Paris apt install -y ca-certificates curl build-essential autoconf bison gawk nasm ninja-build pkg-config python3 python3-click python3-jinja2 python3-pip python3-pyelftools wget libprotobuf-c-dev protobuf-c-compiler protobuf-compiler python3-cryptography python3-pip python3-protobuf unzip
    # Add cosign
    - curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
    - mv cosign-linux-amd64 /usr/local/bin/cosign
    - chmod +x /usr/local/bin/cosign
    # Add docker
    - install -m 0755 -d /etc/apt/keyrings && curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc && chmod a+r /etc/apt/keyrings/docker.asc
    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" |  tee /etc/apt/sources.list.d/docker.list > /dev/null
    - apt-get update
    - apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    - docker ps
    # Add gramine and gsc
    - PIP_ROOT_USER_ACTION=ignore python3 -m pip install 'meson>=0.56' 'tomli>=1.1.0' 'tomli-w>=0.4.0' 'docker' 'jinja2' 'tomli' 'tomli-w' 'pyyaml'
    - wget https://github.com/gramineproject/gsc/archive/refs/tags/v1.6.2.zip && unzip v1.6.2.zip && chmod +x gsc-1.6.2/gsc gsc-1.6.2/gsc.py
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin  $CI_REGISTRY
  script:
    - docker build -t $CONTAINER_TEST_IMAGE --target production-stage .
    - (cd gsc-1.6.2 && ./gsc build --no-cache --rm $CONTAINER_TEST_IMAGE ../gramine/compliance.manifest -c ../gramine/config.yaml)
    - (cd gsc-1.6.2 && ./gsc sign-image -c ../gramine/config.yaml $CONTAINER_TEST_IMAGE /enclave.pem)
    - docker tag gsc-$CONTAINER_TEST_IMAGE $CONTAINER_SGX_TEST_IMAGE
    - docker push $CONTAINER_SGX_TEST_IMAGE
    - IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $CONTAINER_SGX_TEST_IMAGE)
    - cosign sign $IMAGE_DIGEST
  after_script:
    - docker rmi $CONTAINER_TEST_IMAGE $CONTAINER_SGX_TEST_IMAGE gsc-$CONTAINER_TEST_IMAGE gsc-$CONTAINER_TEST_IMAGE-unsigned